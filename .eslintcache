[{"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\index.js":"1","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reportWebVitals.js":"2","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\app-component\\App.jsx":"3","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\index.js":"4","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\testReducer.js":"5","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\questionsSelectReducer.js":"6","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\questionReducer.js":"7","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\test-form\\TestForm.js":"8","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\routeComponent\\Route.js":"9","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\services\\questionsService.ts":"10","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\tests-list-componenet\\TestList.jsx":"11","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\questions.jsx":"12","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\services\\testsService.ts":"13","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\services\\httpService.js":"14","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\popup-component\\Popup.jsx":"15","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\test-form\\FormInputs.jsx":"16","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\question-box-component\\QuestionBox.jsx":"17","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\actions\\index.js":"18","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\enviroments\\enviroment.js":"19","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\test-edit\\TestEdit.jsx":"20","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\questionsForm.jsx":"21","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\questionsTable.jsx":"22","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\multipleChoiceQuestion.jsx":"23","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\choiceQuestion.jsx":"24","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\questionTypes.jsx":"25","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\multiAnswerInput.jsx":"26","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\choiceAnswerInput.jsx":"27","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\routeComponent\\Routes.js":"28","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\History\\history.js":"29","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\homeComponents\\home.jsx":"30","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\Navigation\\navigation.js":"31","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\testsNav\\TestNav.jsx":"32","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\Testing\\Exam.jsx":"33","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\Testing\\QuestionPresent.jsx":"34","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\currentQuestion.js":"35","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\Testing\\AnsQuestionForm.jsx":"36","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\answersReducer.js":"37","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\certificate\\CertificateDisplay.jsx":"38"},{"size":993,"mtime":1611849271712,"results":"39","hashOfConfig":"40"},{"size":362,"mtime":499162500000,"results":"41","hashOfConfig":"40"},{"size":382,"mtime":1611840876756,"results":"42","hashOfConfig":"40"},{"size":570,"mtime":1612092064854,"results":"43","hashOfConfig":"40"},{"size":390,"mtime":1611860514730,"results":"44","hashOfConfig":"40"},{"size":493,"mtime":1612081263509,"results":"45","hashOfConfig":"40"},{"size":342,"mtime":1612081449152,"results":"46","hashOfConfig":"40"},{"size":5702,"mtime":1611881867263,"results":"47","hashOfConfig":"40"},{"size":204,"mtime":1611830322590,"results":"48","hashOfConfig":"40"},{"size":571,"mtime":1611699567827,"results":"49","hashOfConfig":"40"},{"size":3020,"mtime":1612042642556,"results":"50","hashOfConfig":"40"},{"size":566,"mtime":1611840668876,"results":"51","hashOfConfig":"40"},{"size":617,"mtime":1612030256826,"results":"52","hashOfConfig":"40"},{"size":612,"mtime":1611490312094,"results":"53","hashOfConfig":"40"},{"size":1137,"mtime":1611840668832,"results":"54","hashOfConfig":"40"},{"size":3809,"mtime":1612039260841,"results":"55","hashOfConfig":"40"},{"size":763,"mtime":1611592240176,"results":"56","hashOfConfig":"40"},{"size":1655,"mtime":1612094749096,"results":"57","hashOfConfig":"40"},{"size":67,"mtime":1611173601459,"results":"58","hashOfConfig":"40"},{"size":7304,"mtime":1612033540648,"results":"59","hashOfConfig":"40"},{"size":9355,"mtime":1611840668913,"results":"60","hashOfConfig":"40"},{"size":4669,"mtime":1611840668915,"results":"61","hashOfConfig":"40"},{"size":3368,"mtime":1611661903910,"results":"62","hashOfConfig":"40"},{"size":936,"mtime":1611661903893,"results":"63","hashOfConfig":"40"},{"size":424,"mtime":1611173601424,"results":"64","hashOfConfig":"40"},{"size":548,"mtime":1611661903908,"results":"65","hashOfConfig":"40"},{"size":547,"mtime":1611661903864,"results":"66","hashOfConfig":"40"},{"size":1783,"mtime":1612206176386,"results":"67","hashOfConfig":"40"},{"size":86,"mtime":1611840668752,"results":"68","hashOfConfig":"40"},{"size":529,"mtime":1611840668831,"results":"69","hashOfConfig":"40"},{"size":753,"mtime":1611841743299,"results":"70","hashOfConfig":"40"},{"size":517,"mtime":1611841906878,"results":"71","hashOfConfig":"40"},{"size":2296,"mtime":1612266092143,"results":"72","hashOfConfig":"40"},{"size":1221,"mtime":1612205973927,"results":"73","hashOfConfig":"40"},{"size":215,"mtime":1612093998431,"results":"74","hashOfConfig":"40"},{"size":3507,"mtime":1612205737612,"results":"75","hashOfConfig":"40"},{"size":163,"mtime":1612094848948,"results":"76","hashOfConfig":"40"},{"size":241,"mtime":1612266069364,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"a0uvo0",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"80"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"80"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\index.js",[],["170","171"],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reportWebVitals.js",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\app-component\\App.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\index.js",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\testReducer.js",["172"],"import TestsService from '../services/testsService';\r\n\r\nconst testsReducer = (state = [], action)=>{\r\n    //console.log(state);\r\n    if(action.type ===\"FETCH_TEST\"){\r\n        return action.payload\r\n    }\r\n    if(action.type ===\"FETCH_TESTS\"){\r\n        //console.log(\"payload:\",action.payload)\r\n        return action.payload\r\n    }\r\n    \r\n  return state;\r\n}\r\n\r\n\r\nexport default testsReducer;","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\questionsSelectReducer.js",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\questionReducer.js",["173"],"import QuestionService from '../services/questionsService';\r\n\r\n\r\nconst questionReducer =  (state = [], action)=>{\r\n    if(action.type ===\"FETCH_QUESTIONS\"){\r\n        return action.payload\r\n    }\r\n     if(action.type ===\"FETCH_QUESTION\"){\r\n         return action.payload\r\n     }\r\n    \r\n  return state;\r\n}\r\n\r\n\r\n\r\nexport default questionReducer;","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\test-form\\TestForm.js",["174","175"],"import React from 'react';\r\nimport './TestForm.css';\r\nimport { connect } from 'react-redux';\r\nimport { selectQuestions, fetchQuestions } from '../../actions'\r\nimport FormInputs from './FormInputs';\r\nimport TestsSerevice from '../../services/testsService'\r\nimport QuestionBox from '../question-box-component/QuestionBox';\r\nimport Popup from '../popup-component/Popup'\r\n\r\n\r\nfunction ColorRow(e) {\r\n    let TR = e.target;\r\n    while (TR.tagName != \"TR\") {\r\n        TR = TR.parentNode;\r\n    }\r\n    if (TR.classList.contains(\"green\")) {\r\n        TR.classList.remove(\"green\");\r\n        /*console.log(\"disable\")*/\r\n    }\r\n    else {\r\n        TR.classList.add(\"green\");\r\n        /*console.log(\"enable\")*/\r\n    }\r\n}\r\n\r\n\r\nclass TestForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        props.fetchQuestions();\r\n        console.log(props);\r\n        this.state = { dataTable: [], filterTag: \"\", questions: [], showPopup:{show:false, content:null} };\r\n        this.initQuestions();\r\n\r\n    }\r\n\r\n    initQuestions = () => {\r\n        console.log(\"data\",this.props.questions.data);\r\n\r\n        this.props.questions?.data?.map(res => {\r\n            this.setState({ questions: res });\r\n        })\r\n    }\r\n\r\n    togglePopup=(question)=> {\r\n        this.setState({\r\n            showPopup:{show: !this.state.showPopup.show, content:question}\r\n        });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.fetchQuestions()\r\n    }\r\n\r\n    onSubmit = (test) => {\r\n        test = { ...test, questions: this.props.selectedQuestions.map(q => q.Id) };\r\n        alert(\"Test successfully created\");\r\n        TestsSerevice.addTest(test);\r\n        console.log(test);\r\n        window.location.reload();\r\n    }\r\n    \r\n    checkTags=(tag)=>{\r\n            const filterTags = this.state.filterTag.split(\",\");\r\n            console.log(\"FilterTag:\",filterTags);\r\n            console.log(\"tag:\",tag);\r\n            console.log(\"flag\", filterTags.includes(tag));\r\n            if(filterTags.includes(tag))\r\n                return true;\r\n        return false\r\n    }\r\n\r\n    renderQuestions() {\r\n        if (this.state.filterTag !== \"\") {\r\n            let filterTags = this.state.filterTag.split(',');\r\n            return this.props.questions.filter(q => filterTags.some(t=>q.Tags.includes(t)))\r\n                .map((question, index) => {\r\n                    return (<tr key={question.Id} data-item={question}\r\n                        onClick={(e) => {\r\n                            ColorRow(e)\r\n                            this.props.selectQuestions(question);\r\n                        }}\r\n\r\n                        className={(this.props.selectedQuestions.find(q => q.Id === question.Id)) ? \"green\" : \"\"}>\r\n                        <td>{index}</td>\r\n                        <td>{question.Id}</td>\r\n                        <td><QuestionBox question={question} /></td>\r\n                        <td> <button className=\"ui button\" onClick={() => this.togglePopup(question)}>Show</button></td>\r\n                    </tr>)\r\n                }\r\n                )\r\n        }\r\n        else {\r\n            return this.props.questions.map((question, index) => {\r\n                return (<tr key={question.Id} data-item={question}\r\n                    onClick={(e) => {\r\n                        ColorRow(e)\r\n                        this.props.selectQuestions(question);\r\n                    }}\r\n                    className={(this.props.selectedQuestions.find(q => q.Id === question.Id)) ? \"green\" : \"\"}>\r\n                    <td>{index}</td>\r\n                    <td>{question.Id}</td>\r\n                    <td><QuestionBox question={question} /></td>\r\n                    <td> <button className=\"ui button\" onClick={() => this.togglePopup(question)}>Show</button></td>\r\n                </tr>)\r\n            }\r\n            )\r\n        }\r\n    }\r\n    updateFiletrState = () => {\r\n        this.setState({ filterTag: window.document.getElementById(\"filterInput\").value });\r\n    }\r\n    FilerQuestions = () => {\r\n        this.setState({ dataTable: this.renderQuestions() });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"TestForm\">\r\n                <FormInputs renderField={this.renderQuestions} onSubmit={this.onSubmit}></FormInputs>\r\n                <div>\r\n                    <input id=\"filterInput\" value={this.state.filterTag} onChange={this.updateFiletrState} />\r\n                    <button onClick={this.FilerQuestions}>Search</button>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label className=\"white\">Chose questions</label>\r\n                    <table className=\"ui celled table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>ID</th>\r\n                                <th>Content</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.renderQuestions()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>{this.state.showPopup.show ?\r\n                    <Popup\r\n                        content = {this.state.showPopup.content}\r\n                        text='Close Me'\r\n                        closePopup={()=>this.togglePopup(null)}\r\n                    />\r\n                    : null\r\n                }</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        questions: state.questions,\r\n        selectedQuestions: state.questionsSelect\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { selectQuestions, fetchQuestions })(TestForm);\r\n","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\routeComponent\\Route.js",[],["176","177"],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\services\\questionsService.ts",[],["178","179"],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\tests-list-componenet\\TestList.jsx",["180","181","182","183","184","185"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchTests } from '../../actions';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\nimport TestEdit from '../test-edit/TestEdit';\r\n\r\nclass TestList extends React.Component {\r\n    \r\n     EXAMURL = \"/exam\"\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { data: [] };\r\n    }\r\n     copyToClipboard(text) {\r\n            var dummy = document.createElement(\"textarea\");\r\n            // to avoid breaking orgain page when copying more words\r\n            // cant copy when adding below this code\r\n            // dummy.style.display = 'none'\r\n            document.body.appendChild(dummy);\r\n            //Be careful if you use texarea. setAttribute('value', value), which works with \"input\" does not work with \"textarea\". – Eduard\r\n            dummy.value = text;\r\n            dummy.select();\r\n            document.execCommand(\"copy\");\r\n            document.body.removeChild(dummy);\r\n        alert(\"coppied\");\r\n    }\r\n    renderList() {\r\n        console.log(this.props);\r\n      return  this.props.tests.map((t, index) =>{\r\n          return( <tr key={index}>\r\n                    <td>\r\n                        {t.Title}\r\n                    </td>                                                                  \r\n                    <td><button className=\"ui button\"\r\n                     onClick={()=>this.copyToClipboard(`${window.location.protocol}//${window.location.host}${this.EXAMURL}/${t.Id}`)}>Copy</button></td>\r\n                    <td>\r\n                        {t.questions.length}\r\n                    </td>\r\n                    <td>\r\n\r\n                        <div>\r\n                            <Link to={`edittest/${t.Id}`}><button className=\"ui button\">Edit</button></Link>\r\n                        </div>\r\n                    </td>\r\n                </tr>)\r\n            }\r\n      )\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.props.fetchTests();\r\n        let tmp = [];\r\n        console.log(\"props\", this.props)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TestList\">\r\n                <div>\r\n                    <table className=\"ui table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td>Title</td>\r\n                                <td>Link</td>\r\n                                <td>Questions Sum</td>\r\n                                <td>Actions</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.renderList()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        tests: state.test\r\n    })\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchTests })(TestList)\r\n","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\questions.jsx",["186","187"],"import React, { Component } from \"react\";\r\nimport QuestionService from \"../../services/questionsService\"\r\nimport QuestionsForm from \"./questionsForm\";\r\nimport QuestionsTable from \"./questionsTable\";\r\nimport Route from '../routeComponent/Route';\r\n\r\nclass Questions extends Component {\r\n  state = {\r\n    questions: [],\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.getQuestions();\r\n  }\r\n\r\n  async getQuestions() {\r\n    const { data: questions } = await QuestionService.getAllQuestions();\r\n    this.setState({ questions });\r\n    console.log(this.state.questions)\r\n  }\r\n\r\n  addQuestion = async (question) => {\r\n    const addedQuestion = await QuestionService.addQuestion(question);\r\n    this.setState({ questions: [...this.state.questions, addedQuestion.data] });\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"container questions\">\r\n        <div>\r\n        <nav>\r\n        <ul>\r\n          <li><a href=\"/questions/questioncreate\">Add a Question</a></li>\r\n          <li><a href=\"/questions/allquestions\">All Questions</a></li>\r\n        </ul>\r\n      </nav>\r\n        </div>\r\n        {/* <Route path={`/questions/allquestions`}> */}\r\n        {/* <QuestionsTable/> */}\r\n        {/* </Route> */}\r\n        {/* <Route path={`/questions/questioncreate`}> */}\r\n          <QuestionsForm onAddQuestion = {this.addQuestion}/>\r\n        {/* </Route>   */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Questions;","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\services\\testsService.ts",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\services\\httpService.js",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\popup-component\\Popup.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\test-form\\FormInputs.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\question-box-component\\QuestionBox.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\actions\\index.js",["188","189"],"import TestsService from '../services/testsService'\r\nimport QuestionService from '../services/questionsService'\r\nexport const selectQuestions = (question) => {\r\n    return {\r\n        type: \"SELECT_QUESTIONS\",\r\n        payload: question\r\n    }\r\n}\r\nexport const fetchQuestions = () => async dispatch => {\r\n    const response = await QuestionService.getAllQuestions();\r\n    dispatch(({ type: \"FETCH_QUESTIONS\", payload: response.data }));\r\n}\r\n\r\nexport const fetchQuestion = (id) => async dispatch => {\r\n    const response = await QuestionService.getQuestionById(id);\r\n    if (response.status == 200) {\r\n        dispatch({ type: \"FETCH_QUESTION\", payload: response.data });\r\n    }\r\n    else {\r\n        dispatch({ type: \"FETCH_QUESTION\", payload: null })\r\n    }\r\n}\r\nexport const clearselectQuestions = () => {\r\n    return {\r\n        type: \"CLEAR_SELECT_QUESTIONS\",\r\n        payload: null\r\n    }\r\n}\r\n\r\nexport const fetchTest = (id) => async dispatch => {\r\n    const response = await TestsService.getTestById(id);\r\n    dispatch({ type: \"FETCH_TEST\", payload: response.data });\r\n}\r\n\r\nexport const fetchTests = () => async dispatch => {\r\n    const response = await TestsService.getAllTests();\r\n    dispatch({ type: \"FETCH_TESTS\", payload: response.data });\r\n}\r\nexport const addAnswer = (answer) => {\r\n    return {type:\"ADD_ANSWER\",payload:answer}\r\n}\r\nexport const moveQuestion = (id) => async dispatch=> {\r\n    const response = await QuestionService.getQuestionById(id);\r\n    if (response.status == 200) {\r\n        dispatch({ type: \"MOVE_QUESTION\", payload: response.data });\r\n    }\r\n    else {\r\n        dispatch({ type: \"MOVE_QUESTION\", payload: null })\r\n    }\r\n}","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\enviroments\\enviroment.js",["190"],"export default {\r\n    serverUrl: \"http://localhost:4000\",\r\n  };\r\n  ","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\test-edit\\TestEdit.jsx",["191","192","193","194","195"],"import React from 'react';\r\nimport '../test-form/TestForm.css';\r\nimport { connect } from 'react-redux';\r\nimport { selectQuestions, fetchTest, fetchQuestion, fetchQuestions } from '../../actions'\r\nimport FormInputs from '../test-form/FormInputs';\r\nimport ReactDOM from 'react-dom';\r\nimport QuestionBox from '../question-box-component/QuestionBox';\r\nimport Popup from '../popup-component/Popup'\r\nimport TestsService from '../../services/testsService';\r\nimport QuestionService from '../../services/questionsService';\r\n\r\nfunction ColorRow(e) {\r\n    let TR = e.target;\r\n    while (TR.tagName != \"TR\") {\r\n        TR = TR.parentNode;\r\n    }\r\n    console.log(\"TR\", TR);\r\n    if (TR.classList.contains(\"green\")) {\r\n        TR.classList.remove(\"green\");\r\n        /*console.log(\"disable\")*/\r\n    }\r\n    else {\r\n        TR.classList.add(\"green\");\r\n        /*console.log(\"enable\")*/\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nclass TestEdit extends React.Component {\r\n    testId = this.props.match.params.testId;\r\n    test = null;\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"props\", props);\r\n        console.log(\"testId\", this.testId)\r\n\r\n\r\n        // TestsService.getTestById(myParam).then(res=>{\r\n        //     this.setState({Test: res.data});\r\n        //     console.log(this.state.Test);\r\n        //})\r\n\r\n        this.questionsRef = React.createRef();\r\n        this.state = { dataTable: [], Test: {}, filterTag: \"\", questions: [], questionsSelected: [], showPopup: { show: false, content: null } };\r\n        //console.log(\"test\",this.state.Test); \r\n\r\n\r\n    }\r\n\r\n\r\n    initQuestions = () => {\r\n        this.props.questions.then(res => {\r\n            this.setState({ questions: res.data });\r\n            // console.log(this.state);\r\n        })\r\n    }\r\n\r\n    togglePopup = (question) => {\r\n        this.setState({\r\n            showPopup: { show: !this.state.showPopup.show, content: question }\r\n        });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.fetchQuestions();\r\n        let res = this.props.fetchTest(this.testId);\r\n        console.log(\"res\", res);\r\n        this.props.test.questions?.forEach(q =>{\r\n            this.props.selectQuestions(this.props.fetchQuestion(q));\r\n        })\r\n        this.props.test.questions?.map(q => {\r\n            let TRList = window.document.getElementsByName(q.toString());\r\n            {/*console.log(\"TR\",TRList)\r\n        console.log(TRList[0]);*/}\r\n        if(TRList)\r\n            TRList[0].classList.add(\"green\");\r\n        }\r\n\r\n        )\r\n\r\n        //console.log(\"DidMount state\",this.state.Test);\r\n\r\n    }\r\n\r\n\r\n    onSubmit = (test) => {\r\n        test = { ...test, questions: this.props.selectedQuestions.map(q => q.Id) };\r\n        console.log(\"test\", test);\r\n        alert(\"Test successfully created\");\r\n        TestsService.editTest(test);\r\n        //window.location.reload();\r\n    }\r\n    checkTags = (tag) => {\r\n        const filterTags = this.state.filterTag.split(\",\");\r\n        console.log(\"FilterTag:\", filterTags);\r\n        console.log(\"tag:\", tag);\r\n        console.log(\"flag\", filterTags.includes(tag));\r\n        if (filterTags.includes(tag))\r\n            return true;\r\n        return false\r\n\r\n\r\n    }\r\n    renderQuestions() {\r\n        if (this.state.filterTag !== \"\") {\r\n            let filterTags = this.state.filterTag.split(',');\r\n            return this.props.questions.filter(q => filterTags.some(t => q.Tags.includes(t)))\r\n                .map((question, index) => {\r\n                    return (<tr key={question.Id} data-item={question}\r\n                        onClick={(e) => {\r\n                            ColorRow(e)\r\n                            this.props.selectQuestions(question);\r\n                        }}\r\n\r\n                        className={(this.props.selectedQuestions.find(q => q.Id === question.Id)) ? \"green\" : \"\"}>\r\n                        <td>{index}</td>\r\n                        <td>{question.Id}</td>\r\n                        <td><QuestionBox question={question} /></td>\r\n                        <td> <button className=\"ui button\" onClick={() => this.togglePopup(question)}>Show</button></td>\r\n                    </tr>)\r\n                }\r\n                )\r\n        }\r\n        else {\r\n            return this.props.questions.map((question, index) => {\r\n                return (<tr name={`${question.Id}`} key={question.Id} data-item={question}\r\n                    onClick={(e) => {\r\n                        ColorRow(e)\r\n                        this.props.selectQuestions(question);\r\n                    }}\r\n                    ref={this.questionsRef}\r\n                    className={(this.props.selectedQuestions.find(q => q.Id === question.Id)) ? \"green\" : \"\"}>\r\n                    <td>{index}</td>\r\n                    <td>{question.Id}</td>\r\n                    <td><QuestionBox question={question} /></td>\r\n                    <td> <button className=\"ui button\" onClick={() => this.togglePopup(question)}>Show</button></td>\r\n                </tr>)\r\n            }\r\n            )\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.test = this.props.test;\r\n\r\n        console.log(\"test\", this.props.test);\r\n       \r\n    }\r\n    updateFiletrState = () => {\r\n        this.setState({ filterTag: window.document.getElementById(\"filterInput\").value });\r\n    }\r\n    FilerQuestions = () => {\r\n        this.setState({ dataTable: this.renderQuestions() });\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"Render\", this.state)\r\n        //console.log(\"test from render\", this.props.test);\r\n        //console.log(\"test data from render\", this.props.test?.data);\r\n        return (\r\n            <div className=\"TestForm\">\r\n                <FormInputs renderField={this.renderQuestions} onSubmit={this.onSubmit}>\r\n                    {this.props.test}\r\n                </FormInputs>\r\n                <div>\r\n                    <input id=\"filterInput\" value={this.state.filterTag} onChange={this.updateFiletrState} />\r\n                    <button onClick={this.FilerQuestions}>Search</button>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label className=\"white\">Chose questions</label>\r\n                    <table className=\"ui celled table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>ID</th>\r\n                                <th>Content</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody id=\"tableHolder\">\r\n                            {this.renderQuestions()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>{this.state.showPopup.show ?\r\n                    <Popup\r\n                        content={this.state.showPopup.content}\r\n                        text='Close Me'\r\n                        closePopup={() => this.togglePopup(null)}\r\n                    />\r\n                    : null\r\n                }</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        test: state.test,\r\n        questions: state.questions,\r\n        selectedQuestions: state.questionsSelect\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { selectQuestions, fetchQuestion, fetchTest, fetchQuestions })(TestEdit);","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\questionsForm.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\questionsTable.jsx",["196"],"import React,{ Component } from \"react\";\r\nimport QuestionBox from '../question-box-component/QuestionBox';\r\nimport Popup from '../popup-component/Popup';\r\nimport { connect } from 'react-redux';\r\nimport { selectQuestions } from '../../actions';\r\n\r\n\r\nclass QuestionsTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { questions: [], dataTable: [], filterTag: \"\", showPopup:{show:false, content:null} }\r\n        this.initQuestions();\r\n    }\r\n\r\n    initQuestions = () => {\r\n      this.props.questions.then(res => {\r\n          this.setState({ questions: res.data });\r\n      })\r\n  }\r\n\r\n    componentDidMount() {\r\n      this.setState({ dataTable: this.renderQuestions() });\r\n  }\r\n  renderQuestions() {\r\n    let temp = [];\r\n    this.props.questions\r\n        .then(res => {\r\n            res.data.map((question, index) => {\r\n              if (this.state.filterTag !== \"\") {\r\n                question.Tags.forEach(t=>{\r\n                if (this.checkTags(t)) {\r\n                    console.log(\"push\");\r\n                    temp.push(\r\n                        <tr key={question.Id} data-item={question}>\r\n                            <td>{index}</td>\r\n                            <td>{question.Id}</td>\r\n                            <td><QuestionBox question={question} /></td>\r\n                            <td> <button className=\"ui button\" onClick={()=>this.togglePopup(question)}>Show</button></td>\r\n                        </tr>)\r\n                    this.setState({ dataTable: temp });\r\n                }                        \r\n              })\r\n            }\r\n            else {\r\n                temp.push(<tr key={question.Id} data-item={question}>\r\n                    <td>{index}</td>\r\n                    <td>{question.Id}</td>\r\n                    <td><QuestionBox question={question} /></td>\r\n                    <td> <button className=\"ui button\" onClick={()=>this.togglePopup(question)}>Show</button></td>\r\n                </tr>)\r\n                this.setState({ dataTable: temp });\r\n            }\r\n          })\r\n        })\r\n      }\r\n\r\n      updateFiletrState = () => {\r\n        this.setState({ filterTag: window.document.getElementById(\"filterInput\").value });\r\n      }\r\n\r\n      FilerQuestions = () => {\r\n          this.setState({ dataTable: this.renderQuestions() });\r\n      }\r\n\r\n      checkTags=(tag)=>{\r\n        const filterTags = this.state.filterTag.split(\",\");\r\n        console.log(\"FilterTag:\",filterTags);\r\n        console.log(\"tag:\",tag);\r\n        console.log(\"flag\", filterTags.includes(tag));\r\n        if(filterTags.includes(tag))\r\n            return true;\r\n        return false\r\n      }\r\n\r\ntogglePopup=(question)=> {\r\n  this.setState({\r\n      showPopup:{show: !this.state.showPopup.show, content:question}\r\n  });\r\n}\r\n    render() { \r\n        return ( \r\n            <div>\r\n              <div>\r\n                    <input id=\"filterInput\" value={this.state.filterTag} onChange={this.updateFiletrState} />\r\n                    <button onClick={this.FilerQuestions}>Search</button>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label className=\"white\">All Questions</label>\r\n                    <table className=\"ui celled table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>ID</th>\r\n                                <th>Content</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.dataTable}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>{this.state.showPopup.show ?\r\n                    <Popup\r\n                        content = {this.state.showPopup.content}\r\n                        text='Close Me'\r\n                        closePopup={()=>this.togglePopup(null)}\r\n                    />\r\n                    : null\r\n                }</div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nconst mapStateToProps = (state) => {\r\n\r\n  return {\r\n      questions: state.questions,\r\n      selectedQuestions: state.questionsSelect\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { selectQuestions })(QuestionsTable);\r\n  ","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\multipleChoiceQuestion.jsx",["197"],"import { render } from '@testing-library/react';\r\nimport React, { Component } from 'react';\r\nimport AnswerInput from './multiAnswerInput';\r\n\r\nclass MultipleChoiceQuestion extends Component {\r\n\r\n   constructor(props){\r\n      super(props);\r\n      this.state = { Index: 13 }\r\n   }\r\n   \r\n   addAnswerInput = (e) =>{\r\n      if(this.state.Index <= 16){\r\n         let input = document.getElementById(this.state.Index);\r\n         input.hidden = false;\r\n         this.props.updateInputsNum(this.state.Index - 8);\r\n         if(this.state.Index < 16){\r\n            this.setState({ Index: this.state.Index + 1 });\r\n         }\r\n         else{\r\n            alert(\"Reached the maximum limit of answers you can add\");\r\n         }\r\n      }     \r\n   }\r\n\r\n   removeAnswerInput = (e) =>{\r\n      if(this.state.Index >= 13){\r\n         let input = document.getElementById(this.state.Index);\r\n         input.hidden = true;\r\n         this.props.updateInputsNum(this.state.Index - 9);\r\n         if(this.state.Index > 13){           \r\n            this.setState({ Index: this.state.Index - 1 });\r\n         }\r\n         else{\r\n            alert(\"You can not remove any more answers\");\r\n         }\r\n      }\r\n   }\r\n\r\n   render(){\r\n      return ( \r\n         <div>\r\n            <div>\r\n               <AnswerInput Id=\"1\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div>\r\n               <AnswerInput Id=\"2\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div>\r\n               <AnswerInput Id=\"3\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div>\r\n               <AnswerInput Id=\"4\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"13\" hidden = {true}>\r\n               <AnswerInput Id=\"5\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"14\" hidden = {true}>\r\n               <AnswerInput Id=\"6\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"15\" hidden = {true}>\r\n               <AnswerInput Id=\"7\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"16\" hidden = {true}>\r\n               <AnswerInput Id=\"8\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>          \r\n            <div>\r\n               <button className=\"btn btn-primary btn-sm\">Add Question</button>\r\n            </div>\r\n            <input type=\"button\" value = \"Add Answer\" onClick ={this.addAnswerInput}/>\r\n            <input type=\"button\" value = \"Remove Answer\" onClick ={this.removeAnswerInput}/>\r\n         </div>\r\n     );\r\n   }\r\n}\r\n\r\nexport default MultipleChoiceQuestion;","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\choiceQuestion.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\questionTypes.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\multiAnswerInput.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\questionsComponents\\choiceAnswerInput.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\routeComponent\\Routes.js",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\History\\history.js",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\homeComponents\\home.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\Navigation\\navigation.js",["198","199"],"import React from 'react';\r\nimport { Navbar, Nav, Form, Button } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst Navigation = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <Navbar bg=\"primary\" variant=\"dark\">\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"/\">Home</Nav.Link>\r\n                    <Nav.Link href=\"/Questions\">Questions</Nav.Link>\r\n                    <Nav.Link href=\"/tests\">Tests</Nav.Link>\r\n                    \r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default withRouter(Navigation);","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\testsNav\\TestNav.jsx",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\Testing\\Exam.jsx",["200"],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\Testing\\QuestionPresent.jsx",["201"],"import React from 'react';\r\nimport AnsQuestionForm from './AnsQuestionForm';\r\nimport './QuestionPresent.css';\r\n\r\nclass QuestionPresent extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n\r\n    onSubmit=(answer)=>{\r\n        this.props.onSubmit(answer);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"QuestionPresent\">\r\n                    <div className=\"ui card\">\r\n                        <label>{this.props.question?.Title}</label>\r\n                    </div>\r\n                    <div>\r\n                        <h5 className=\"blue\">{this.props.question?.Tags?.map(t=>t+\"||\")}</h5>\r\n                    </div>\r\n                    <div className=\"ui attached segment\">\r\n                       <h2> {this.props.question?.QuestionBody}</h2>\r\n                    </div>\r\n                    <div className=\"ui attached segment\">\r\n                        <h4>{this.props.question?.ExtraInfo}</h4>\r\n                    </div>\r\n                    <div>\r\n                        <AnsQuestionForm onSubmit={this.onSubmit}>{this.props.question}</AnsQuestionForm>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuestionPresent; \r\n","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\currentQuestion.js",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\Testing\\AnsQuestionForm.jsx",["202","203","204"],"import { reduxForm, Field } from 'redux-form';\r\nimport React, { useState } from 'react'\r\n\r\nclass AnsQuestionForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { answerValue: \"\", flagSingle: false }\r\n    }\r\n\r\n\r\n\r\n    createInput = (formProps) => {\r\n        console.log(formProps);\r\n        return (<input onChange={formProps.input.onChange} name=\"group1\" type={formProps.type} value={formProps.children}></input>)\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"ans\", e);\r\n        this.props.onSubmit(this.state.answerValue);\r\n        this.setState({\r\n            flagSingle: this.props.children?.Answers?.reduce(function (n, val) {\r\n                return n + (val.isCorrect === true);\r\n            }, 0) == 1\r\n        });\r\n        console.log(this.state.flagSingle);\r\n        this.setState({ answerValue: \"\" });\r\n        var inputs, index;\r\n        inputs = document.getElementsByTagName('input');\r\n        for (index = 0; index < inputs.length; ++index) {\r\n            inputs[index].checked = false;\r\n        }\r\n    }\r\n    answerChange = (e) => {\r\n        if (this.props.children?.QuestionType === \"Choice\")\r\n            this.setState({ answerValue: e.target.value });\r\n        else {\r\n            if (this.state.answerValue === \"\")\r\n                this.setState({ answerValue: [e.target.value] });\r\n            else\r\n                this.setState({ answerValue: [e.target.value, ...this.state.answerValue] });\r\n        }\r\n    }\r\n    renderSingleAnswer = () => {\r\n\r\n        return (<form className=\"ui form\" onSubmit={this.onSubmit}>\r\n            {this.props.children?.Answers?.map((a, index) => {\r\n                return (\r\n                    <div key={index} className=\"Field radio checkbox\">\r\n                        <div className=\"ui card\">\r\n                            <input onChange={this.answerChange} name=\"group1\" type=\"radio\" value={a.Content}></input>\r\n                            {/*<Field name=\"answer\" component={createInput} type=\"radio\">{a.Content}</Field>*/}\r\n                            <label>{a.Content}</label>\r\n                        </div>\r\n                    </div>)\r\n            })}\r\n\r\n            <div className=\"nextbtn\">\r\n                <button type=\"submit\">Next</button>\r\n            </div>\r\n        </form>\r\n        )\r\n    }\r\n    renderMultiAnswer = () => {\r\n\r\n        return (<form className=\"ui form\" onSubmit={this.onSubmit}>\r\n            {this.props.children?.Answers?.map((a, index) => {\r\n                return (\r\n                    <div key={index} className=\"Field radio checkbox\">\r\n                        <div className=\"ui card\">\r\n                            <input onChange={this.answerChange} name=\"group1\" type=\"checkbox\" value={a.Content}></input>\r\n                            {/*<Field name=\"answer\" component={createInput} type=\"radio\">{a.Content}</Field>*/}\r\n                            <label>{a.Content}</label>\r\n                        </div>\r\n                    </div>)\r\n            })}\r\n\r\n\r\n            <div className=\"nextbtn\">\r\n                <button type=\"submit\">Next</button>\r\n            </div>\r\n        </form>\r\n        )\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"AnsQuestionForm\">\r\n                {this.props.children?.QuestionType === \"Choice\" ? this.renderSingleAnswer() : this.renderMultiAnswer()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default reduxForm({ form: 'QuestionAnswer' })(AnsQuestionForm)\r\n","C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\reducers\\answersReducer.js",[],"C:\\Users\\hhhh5\\Course Projects\\C#\\React\\tests-project\\src\\components\\certificate\\CertificateDisplay.jsx",[],{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":1,"column":8,"nodeType":"211","messageId":"212","endLine":1,"endColumn":20},{"ruleId":"209","severity":1,"message":"213","line":1,"column":8,"nodeType":"211","messageId":"212","endLine":1,"endColumn":23},{"ruleId":"214","severity":1,"message":"215","line":13,"column":23,"nodeType":"216","messageId":"217","endLine":13,"endColumn":25},{"ruleId":"218","severity":1,"message":"219","line":40,"column":45,"nodeType":"220","messageId":"221","endLine":40,"endColumn":47},{"ruleId":"205","replacedBy":"222"},{"ruleId":"207","replacedBy":"223"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"224","line":1,"column":17,"nodeType":"211","messageId":"212","endLine":1,"endColumn":25},{"ruleId":"209","severity":1,"message":"225","line":1,"column":27,"nodeType":"211","messageId":"212","endLine":1,"endColumn":36},{"ruleId":"209","severity":1,"message":"226","line":5,"column":22,"nodeType":"211","messageId":"212","endLine":5,"endColumn":28},{"ruleId":"209","severity":1,"message":"227","line":7,"column":5,"nodeType":"211","messageId":"212","endLine":7,"endColumn":18},{"ruleId":"209","severity":1,"message":"228","line":9,"column":8,"nodeType":"211","messageId":"212","endLine":9,"endColumn":16},{"ruleId":"209","severity":1,"message":"229","line":56,"column":13,"nodeType":"211","messageId":"212","endLine":56,"endColumn":16},{"ruleId":"209","severity":1,"message":"230","line":4,"column":8,"nodeType":"211","messageId":"212","endLine":4,"endColumn":22},{"ruleId":"209","severity":1,"message":"231","line":5,"column":8,"nodeType":"211","messageId":"212","endLine":5,"endColumn":13},{"ruleId":"214","severity":1,"message":"232","line":16,"column":25,"nodeType":"216","messageId":"217","endLine":16,"endColumn":27},{"ruleId":"214","severity":1,"message":"232","line":44,"column":25,"nodeType":"216","messageId":"217","endLine":44,"endColumn":27},{"ruleId":"233","severity":1,"message":"234","line":1,"column":1,"nodeType":"235","endLine":3,"endColumn":5},{"ruleId":"209","severity":1,"message":"236","line":6,"column":8,"nodeType":"211","messageId":"212","endLine":6,"endColumn":16},{"ruleId":"209","severity":1,"message":"213","line":10,"column":8,"nodeType":"211","messageId":"212","endLine":10,"endColumn":23},{"ruleId":"214","severity":1,"message":"215","line":14,"column":23,"nodeType":"216","messageId":"217","endLine":14,"endColumn":25},{"ruleId":"218","severity":1,"message":"219","line":74,"column":42,"nodeType":"220","messageId":"221","endLine":74,"endColumn":44},{"ruleId":"237","severity":1,"message":"238","line":76,"column":13,"nodeType":"239","messageId":"240","endLine":77,"endColumn":35},{"ruleId":"218","severity":1,"message":"219","line":28,"column":44,"nodeType":"220","messageId":"221","endLine":28,"endColumn":46},{"ruleId":"209","severity":1,"message":"241","line":1,"column":10,"nodeType":"211","messageId":"212","endLine":1,"endColumn":16},{"ruleId":"209","severity":1,"message":"242","line":2,"column":23,"nodeType":"211","messageId":"212","endLine":2,"endColumn":27},{"ruleId":"209","severity":1,"message":"243","line":2,"column":29,"nodeType":"211","messageId":"212","endLine":2,"endColumn":35},{"ruleId":"209","severity":1,"message":"244","line":5,"column":9,"nodeType":"211","messageId":"212","endLine":5,"endColumn":13},{"ruleId":"245","severity":1,"message":"246","line":6,"column":5,"nodeType":"247","messageId":"248","endLine":9,"endColumn":6},{"ruleId":"209","severity":1,"message":"249","line":1,"column":21,"nodeType":"211","messageId":"212","endLine":1,"endColumn":26},{"ruleId":"209","severity":1,"message":"224","line":2,"column":17,"nodeType":"211","messageId":"212","endLine":2,"endColumn":25},{"ruleId":"214","severity":1,"message":"232","line":23,"column":19,"nodeType":"216","messageId":"217","endLine":23,"endColumn":21},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"no-unused-vars","'TestsService' is defined but never used.","Identifier","unusedVar","'QuestionService' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["250"],["251"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Router' is defined but never used.","'useRouteMatch' is defined but never used.","'TestEdit' is defined but never used.","'tmp' is assigned a value but never used.","'QuestionsTable' is defined but never used.","'Route' is defined but never used.","Expected '===' and instead saw '=='.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'ReactDOM' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'render' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'Link' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Field' is defined but never used.","no-global-assign","no-unsafe-negation"]