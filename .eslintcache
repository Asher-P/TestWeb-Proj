[{"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\index.js":"1","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reportWebVitals.js":"2","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\app-component\\App.jsx":"3","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\test-form\\TestForm.js":"4","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\services\\questionsService.ts":"5","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\services\\httpService.js":"6","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\enviroments\\enviroment.js":"7","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionsForm.jsx":"8","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionTypes.jsx":"9","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\choiceQuestion.jsx":"10","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\multipleChoiceQuestion.jsx":"11","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questions.jsx":"12","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionsTable.jsx":"13","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\choiceAnswerInput.jsx":"14","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\multiAnswerInput.jsx":"15"},{"size":542,"mtime":1610977084591,"results":"16","hashOfConfig":"17"},{"size":375,"mtime":1610977084607,"results":"18","hashOfConfig":"17"},{"size":685,"mtime":1610994643851,"results":"19","hashOfConfig":"17"},{"size":2513,"mtime":1610977084591,"results":"20","hashOfConfig":"17"},{"size":444,"mtime":1611050322591,"results":"21","hashOfConfig":"17"},{"size":612,"mtime":1610991156295,"results":"22","hashOfConfig":"17"},{"size":67,"mtime":1610977084591,"results":"23","hashOfConfig":"17"},{"size":8136,"mtime":1611509776802,"results":"24","hashOfConfig":"17"},{"size":424,"mtime":1611063050703,"results":"25","hashOfConfig":"17"},{"size":933,"mtime":1611180260298,"results":"26","hashOfConfig":"17"},{"size":3373,"mtime":1611406072653,"results":"27","hashOfConfig":"17"},{"size":1194,"mtime":1611506716630,"results":"28","hashOfConfig":"17"},{"size":1163,"mtime":1611484286020,"results":"29","hashOfConfig":"17"},{"size":527,"mtime":1611179746553,"results":"30","hashOfConfig":"17"},{"size":528,"mtime":1611264958876,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1ge9uil",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\index.js",[],["69","70"],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reportWebVitals.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\app-component\\App.jsx",["71","72","73","74"],"import React, {useState,useEffect} from 'react';\r\nimport './App.css';\r\nimport TestForm from '../test-form/TestForm';\r\nimport Questions from '../questionsComponents/questions'\r\nimport QuestionsService from '../../services/questionsService';\r\nimport QuestionsForm from '../questionsComponents/questionsForm';\r\n\r\n\r\nfunction App() {\r\n  const [questions, setQuestions] = useState([])\r\n  useEffect(async () => await QuestionsService.getAllQuestions().then((response)=>setQuestions(response.data)),[]);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <div>\r\n        <Questions/>\r\n      </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\test-form\\TestForm.js",["75","76"],"import React from 'react';\r\nimport './TestForm.css';\r\n\r\nfunction ColorRow(e){\r\n    if(e.target.parentNode.tagName == \"TR\")\r\n    {\r\n        console.log(e.target.parentNode.classList.contains(\"green\"))\r\n        if(e.target.parentNode.classList.contains(\"green\")){\r\n            e.target.parentNode.classList.remove(\"green\");\r\n            /*console.log(\"disable\")*/\r\n        }\r\n        else{\r\n            e.target.parentNode.classList.add(\"green\");\r\n            /*console.log(\"enable\")*/\r\n        }\r\n    }\r\n}\r\n\r\nfunction TestForm(props) {\r\n   const questions=props.questions;\r\n   const dataTable = [];\r\n   questions.map((question,index) => {\r\n    dataTable.push(<tr key={question.Id} data-item={question} onClick={ColorRow} >\r\n        <td>{index}</td>\r\n        <td>{question.Id}</td>\r\n        <td>{question.Title}</td>\r\n    </tr>)\r\n})\r\n    console.log(props);\r\n    console.log(questions);\r\n    return (\r\n        <div className=\"TestForm\">\r\n\r\n            <form className=\"ui form\">\r\n                <div className=\"filed\">\r\n                    <label>Test Title</label>\r\n                    <input type=\"text\" placeholder=\"Title\"></input>\r\n                </div>\r\n\r\n                <div className=\"filed\">\r\n                    <label>Language</label>\r\n                    <select>\r\n                        <option value=\"\">Lenguge</option>\r\n                        <option value=\"0\">Hebrew</option>\r\n                        <option value=\"1\">English</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"filed\">\r\n                    <label>Passing grade</label>\r\n                    <input type=\"number\" />\r\n                </div>\r\n\r\n                <div className=\"filed\">\r\n                    <label>Content</label>\r\n                    <textarea></textarea>\r\n                </div>\r\n\r\n                <div className=\"filed\">\r\n                    <label>Chose questions</label>\r\n                    <table className=\"ui celled table\">\r\n                        <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>ID</th>\r\n                                    <th>Content</th>\r\n                                </tr>\r\n                            </thead>\r\n                        <tbody>\r\n                            {dataTable}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestForm\r\n","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\services\\questionsService.ts",[],["77","78"],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\services\\httpService.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\enviroments\\enviroment.js",["79"],"export default {\r\n    serverUrl: \"http://localhost:4000\",\r\n  };\r\n  ","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionsForm.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionTypes.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\choiceQuestion.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\multipleChoiceQuestion.jsx",["80"],"import { render } from '@testing-library/react';\r\nimport React, { Component } from 'react';\r\nimport AnswerInput from './multiAnswerInput';\r\n\r\nclass MultipleChoiceQuestion extends Component {\r\n\r\n   constructor(props){\r\n      super(props);\r\n      this.state = { Index: 5 }\r\n   }\r\n   \r\n   addAnswerInput = (e) =>{\r\n      if(this.state.Index <= 8){\r\n         let input = document.getElementById(this.state.Index);\r\n         input.hidden = false;\r\n         this.props.updateInputsNum(this.state.Index);\r\n         if(this.state.Index < 8){\r\n            this.setState({ Index: this.state.Index + 1 });\r\n         }\r\n         else{\r\n            alert(\"Reached the maximum limit of answers you can add\");\r\n         }\r\n      }     \r\n   }\r\n\r\n   removeAnswerInput = (e) =>{\r\n      if(this.state.Index >= 5){\r\n         let input = document.getElementById(this.state.Index);\r\n         input.hidden = true;\r\n         this.props.updateInputsNum(this.state.Index - 1);\r\n         if(this.state.Index > 5){           \r\n            this.setState({ Index: this.state.Index - 1 });\r\n         }\r\n         else{\r\n            alert(\"You can not remove any more answers\");\r\n         }\r\n      }\r\n   }\r\n\r\n   render(){\r\n      return ( \r\n         <div>\r\n            <div Id=\"1\">\r\n               <AnswerInput Id=\"1\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"2\">\r\n               <AnswerInput Id=\"2\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"3\">\r\n               <AnswerInput Id=\"3\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"4\">\r\n               <AnswerInput Id=\"4\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"5\" hidden = {true}>\r\n               <AnswerInput Id=\"5\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"6\" hidden = {true}>\r\n               <AnswerInput Id=\"6\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"7\" hidden = {true}>\r\n               <AnswerInput Id=\"7\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"8\" hidden = {true}>\r\n               <AnswerInput Id=\"8\" answerChanged={this.props.answerChanged} \r\n               correctAnswerChanged={this.props.correctAnswerChanged}/>\r\n            </div>\r\n            <div>\r\n               <button className=\"btn btn-primary btn-sm\">Add Question</button>\r\n            </div>\r\n            <input type=\"button\" value = \"Add Answer\" onClick ={this.addAnswerInput}/>\r\n            <input type=\"button\" value = \"Remove Answer\" onClick ={this.removeAnswerInput}/>\r\n         </div>\r\n     );\r\n   }\r\n}\r\n\r\nexport default MultipleChoiceQuestion;","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questions.jsx",["81"],"import React, { Component } from \"react\";\r\nimport QuestionService from \"../../services/questionsService\"\r\nimport QuestionsForm from \"./questionsForm\";\r\nimport QuestionsTable from \"./questionsTable\";\r\n\r\nclass Questions extends Component {\r\n  state = {\r\n    questions: [],\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.getQuestions();\r\n  }\r\n\r\n  async getQuestions() {\r\n    const { data: questions } = await QuestionService.getAllQuestions();\r\n    this.setState({ questions });\r\n    console.log(this.state.questions)\r\n  }\r\n\r\n  addQuestion = async (question) => {\r\n    const addedQuestion = await QuestionService.addQuestion(question);\r\n    this.setState({ questions: [...this.state.questions, addedQuestion.data] });\r\n  };\r\n\r\n  showQuestion = (question) =>{\r\n    console.log(question);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"container questions\">\r\n        {/* <div>\r\n          <QuestionsTable questions= {this.state.questions}/>\r\n        </div> */}\r\n        <div>\r\n          <h1>Add a new question</h1>\r\n          <QuestionsForm onAddQuestion={this.addQuestion} showQuestion={this.showQuestion}/>\r\n        </div>  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Questions;","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionsTable.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\choiceAnswerInput.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\multiAnswerInput.jsx",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":16},{"ruleId":"86","severity":1,"message":"90","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":21},{"ruleId":"86","severity":1,"message":"91","line":10,"column":10,"nodeType":"88","messageId":"89","endLine":10,"endColumn":19},{"ruleId":"92","severity":1,"message":"93","line":11,"column":13,"nodeType":"94","endLine":11,"endColumn":111},{"ruleId":"95","severity":1,"message":"96","line":5,"column":36,"nodeType":"97","messageId":"98","endLine":5,"endColumn":38},{"ruleId":"99","severity":1,"message":"100","line":22,"column":35,"nodeType":"94","messageId":"101","endLine":22,"endColumn":37},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":1,"nodeType":"104","endLine":3,"endColumn":5},{"ruleId":"86","severity":1,"message":"105","line":1,"column":10,"nodeType":"88","messageId":"89","endLine":1,"endColumn":16},{"ruleId":"86","severity":1,"message":"106","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":22},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'TestForm' is defined but never used.","Identifier","unusedVar","'QuestionsForm' is defined but never used.","'questions' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'render' is defined but never used.","'QuestionsTable' is defined but never used.","no-global-assign","no-unsafe-negation"]