[{"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\index.js":"1","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reportWebVitals.js":"2","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\app-component\\App.jsx":"3","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\index.js":"4","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\test-form\\TestForm.js":"5","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\routeComponent\\Route.js":"6","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\questionReducer.js":"7","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\testReducer.js":"8","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\services\\questionsService.ts":"9","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\questionsSelectReducer.js":"10","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\tests-list-componenet\\TestList.jsx":"11","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questions.jsx":"12","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\services\\testsService.ts":"13","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\services\\httpService.js":"14","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\question-box-component\\QuestionBox.jsx":"15","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\test-form\\FormInputs.jsx":"16","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\popup-component\\Popup.jsx":"17","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\actions\\index.js":"18","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionsForm.jsx":"19","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\enviroments\\enviroment.js":"20","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionsTable.jsx":"21","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\test-edit\\TestEdit.jsx":"22","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\multipleChoiceQuestion.jsx":"23","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionTypes.jsx":"24","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\choiceQuestion.jsx":"25","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\choiceAnswerInput.jsx":"26","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\multiAnswerInput.jsx":"27","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\homeComponents\\home.jsx":"28","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\routeComponent\\Routes.js":"29","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\History\\history.js":"30","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\Navigation\\navigation.js":"31","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\answersReducer.js":"32","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\currentQuestion.js":"33","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\testsNav\\TestNav.jsx":"34","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\Testing\\Exam.jsx":"35","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\Testing\\QuestionPresent.jsx":"36","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\Testing\\AnsQuestionForm.jsx":"37"},{"size":778,"mtime":1612109036448,"results":"38","hashOfConfig":"39"},{"size":375,"mtime":1610977084607,"results":"40","hashOfConfig":"39"},{"size":376,"mtime":1612109475152,"results":"41","hashOfConfig":"39"},{"size":570,"mtime":1612109036422,"results":"42","hashOfConfig":"39"},{"size":5702,"mtime":1612180448060,"results":"43","hashOfConfig":"39"},{"size":162,"mtime":1611749864218,"results":"44","hashOfConfig":"39"},{"size":342,"mtime":1612109036424,"results":"45","hashOfConfig":"39"},{"size":390,"mtime":1612109036426,"results":"46","hashOfConfig":"39"},{"size":765,"mtime":1612347922175,"results":"47","hashOfConfig":"39"},{"size":493,"mtime":1611748348923,"results":"48","hashOfConfig":"39"},{"size":3020,"mtime":1612109036416,"results":"49","hashOfConfig":"39"},{"size":566,"mtime":1611842012643,"results":"50","hashOfConfig":"39"},{"size":617,"mtime":1612109036427,"results":"51","hashOfConfig":"39"},{"size":612,"mtime":1610991156295,"results":"52","hashOfConfig":"39"},{"size":763,"mtime":1611663591453,"results":"53","hashOfConfig":"39"},{"size":3809,"mtime":1612109036412,"results":"54","hashOfConfig":"39"},{"size":1137,"mtime":1611741677231,"results":"55","hashOfConfig":"39"},{"size":1704,"mtime":1612188084387,"results":"56","hashOfConfig":"39"},{"size":13623,"mtime":1612351058542,"results":"57","hashOfConfig":"39"},{"size":67,"mtime":1610977084591,"results":"58","hashOfConfig":"39"},{"size":4859,"mtime":1612196113568,"results":"59","hashOfConfig":"39"},{"size":7304,"mtime":1612109036410,"results":"60","hashOfConfig":"39"},{"size":2152,"mtime":1612287640637,"results":"61","hashOfConfig":"39"},{"size":447,"mtime":1612262352200,"results":"62","hashOfConfig":"39"},{"size":853,"mtime":1612289624039,"results":"63","hashOfConfig":"39"},{"size":547,"mtime":1612289265750,"results":"64","hashOfConfig":"39"},{"size":548,"mtime":1611584216955,"results":"65","hashOfConfig":"39"},{"size":622,"mtime":1612180776803,"results":"66","hashOfConfig":"39"},{"size":1787,"mtime":1612184479354,"results":"67","hashOfConfig":"39"},{"size":86,"mtime":1611752789324,"results":"68","hashOfConfig":"39"},{"size":731,"mtime":1612109284547,"results":"69","hashOfConfig":"39"},{"size":163,"mtime":1612109036419,"results":"70","hashOfConfig":"39"},{"size":289,"mtime":1612112013091,"results":"71","hashOfConfig":"39"},{"size":517,"mtime":1612109036418,"results":"72","hashOfConfig":"39"},{"size":2102,"mtime":1612109036403,"results":"73","hashOfConfig":"39"},{"size":1228,"mtime":1612109036407,"results":"74","hashOfConfig":"39"},{"size":1604,"mtime":1612109036401,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1ge9uil",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"78"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"78"},"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\index.js",[],["165","166"],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reportWebVitals.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\app-component\\App.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\index.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\test-form\\TestForm.js",["167","168"],"import React from 'react';\r\nimport './TestForm.css';\r\nimport { connect } from 'react-redux';\r\nimport { selectQuestions, fetchQuestions } from '../../actions'\r\nimport FormInputs from './FormInputs';\r\nimport TestsSerevice from '../../services/testsService'\r\nimport QuestionBox from '../question-box-component/QuestionBox';\r\nimport Popup from '../popup-component/Popup'\r\n\r\n\r\nfunction ColorRow(e) {\r\n    let TR = e.target;\r\n    while (TR.tagName != \"TR\") {\r\n        TR = TR.parentNode;\r\n    }\r\n    if (TR.classList.contains(\"green\")) {\r\n        TR.classList.remove(\"green\");\r\n        /*console.log(\"disable\")*/\r\n    }\r\n    else {\r\n        TR.classList.add(\"green\");\r\n        /*console.log(\"enable\")*/\r\n    }\r\n}\r\n\r\n\r\nclass TestForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        props.fetchQuestions();\r\n        console.log(props);\r\n        this.state = { dataTable: [], filterTag: \"\", questions: [], showPopup:{show:false, content:null} };\r\n        this.initQuestions();\r\n\r\n    }\r\n\r\n    initQuestions = () => {\r\n        console.log(\"data\",this.props.questions.data);\r\n\r\n        this.props.questions?.data?.map(res => {\r\n            this.setState({ questions: res });\r\n        })\r\n    }\r\n\r\n    togglePopup=(question)=> {\r\n        this.setState({\r\n            showPopup:{show: !this.state.showPopup.show, content:question}\r\n        });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.fetchQuestions()\r\n    }\r\n\r\n    onSubmit = (test) => {\r\n        test = { ...test, questions: this.props.selectedQuestions.map(q => q.Id) };\r\n        alert(\"Test successfully created\");\r\n        TestsSerevice.addTest(test);\r\n        console.log(test);\r\n        window.location.reload();\r\n    }\r\n    \r\n    checkTags=(tag)=>{\r\n            const filterTags = this.state.filterTag.split(\",\");\r\n            console.log(\"FilterTag:\",filterTags);\r\n            console.log(\"tag:\",tag);\r\n            console.log(\"flag\", filterTags.includes(tag));\r\n            if(filterTags.includes(tag))\r\n                return true;\r\n        return false\r\n    }\r\n\r\n    renderQuestions() {\r\n        if (this.state.filterTag !== \"\") {\r\n            let filterTags = this.state.filterTag.split(',');\r\n            return this.props.questions.filter(q => filterTags.some(t=>q.Tags.includes(t)))\r\n                .map((question, index) => {\r\n                    return (<tr key={question.Id} data-item={question}\r\n                        onClick={(e) => {\r\n                            ColorRow(e)\r\n                            this.props.selectQuestions(question);\r\n                        }}\r\n\r\n                        className={(this.props.selectedQuestions.find(q => q.Id === question.Id)) ? \"green\" : \"\"}>\r\n                        <td>{index}</td>\r\n                        <td>{question.Id}</td>\r\n                        <td><QuestionBox question={question} /></td>\r\n                        <td> <button className=\"ui button\" onClick={() => this.togglePopup(question)}>Show</button></td>\r\n                    </tr>)\r\n                }\r\n                )\r\n        }\r\n        else {\r\n            return this.props.questions.map((question, index) => {\r\n                return (<tr key={question.Id} data-item={question}\r\n                    onClick={(e) => {\r\n                        ColorRow(e)\r\n                        this.props.selectQuestions(question);\r\n                    }}\r\n                    className={(this.props.selectedQuestions.find(q => q.Id === question.Id)) ? \"green\" : \"\"}>\r\n                    <td>{index}</td>\r\n                    <td>{question.Id}</td>\r\n                    <td><QuestionBox question={question} /></td>\r\n                    <td> <button className=\"ui button\" onClick={() => this.togglePopup(question)}>Show</button></td>\r\n                </tr>)\r\n            }\r\n            )\r\n        }\r\n    }\r\n    updateFiletrState = () => {\r\n        this.setState({ filterTag: window.document.getElementById(\"filterInput\").value });\r\n    }\r\n    FilerQuestions = () => {\r\n        this.setState({ dataTable: this.renderQuestions() });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"TestForm\">\r\n                <FormInputs renderField={this.renderQuestions} onSubmit={this.onSubmit}></FormInputs>\r\n                <div>\r\n                    <input id=\"filterInput\" value={this.state.filterTag} onChange={this.updateFiletrState} />\r\n                    <button onClick={this.FilerQuestions}>Search</button>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label className=\"white\">Chose questions</label>\r\n                    <table className=\"ui celled table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>ID</th>\r\n                                <th>Content</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.renderQuestions()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>{this.state.showPopup.show ?\r\n                    <Popup\r\n                        content = {this.state.showPopup.content}\r\n                        text='Close Me'\r\n                        closePopup={()=>this.togglePopup(null)}\r\n                    />\r\n                    : null\r\n                }</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        questions: state.questions,\r\n        selectedQuestions: state.questionsSelect\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { selectQuestions, fetchQuestions })(TestForm);\r\n","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\routeComponent\\Route.js",[],["169","170"],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\questionReducer.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\testReducer.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\services\\questionsService.ts",["171"],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\questionsSelectReducer.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\tests-list-componenet\\TestList.jsx",["172","173","174","175"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { clearselectQuestions } from '../../actions';\r\nimport TestEdit from '../test-edit/TestEdit';\r\n\r\nconst TestList = (props) => {\r\n    console.log(\"TestList props\",props);\r\n    const [testEdit, setTestEdit] = useState(null);\r\n    const [data, setData] = useState([]);\r\n    const getChoosenTest=(test)=>{return test}\r\n\r\n    const setTestData=(test)=>{\r\n        setTestEdit(null);\r\n        setTestEdit(<TestEdit Test={test}></TestEdit>);\r\n    }\r\n    const clearData=()=>{\r\n        setTestEdit(null);\r\n        props.clearselectQuestions();\r\n    }\r\n\r\n    useEffect(() => {\r\n        let tmp = [];\r\n        props.tests.then(res => {\r\n\r\n            res.data.map((t, index) => {\r\n                {\r\n                    tmp.push(<tr key={index}>\r\n                        <td>\r\n                            {t.Title}\r\n                        </td>\r\n                        <td></td>\r\n                        <td>\r\n                            {t.questions.length}\r\n                        </td>\r\n                        <td>\r\n                            <div>\r\n                                <button onClick={()=>setTestData(t)}>Edit</button>\r\n                            </div>\r\n                        </td>\r\n                    </tr>)\r\n                }\r\n            })\r\n            setData(tmp);\r\n        })\r\n    }, [])\r\n    return (\r\n        <div className=\"TestList\">\r\n            <div>\r\n            <table className=\"ui table\">\r\n                <thead>\r\n                    <tr>\r\n                        <td>Title</td>\r\n                        <td>Link</td>\r\n                        <td>Questions Sum</td>\r\n                        <td>Actions</td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {data}\r\n                </tbody>\r\n            </table>\r\n            </div>\r\n            <div>\r\n                <button onClick={()=>clearData()}>cencel\r\n                </button>\r\n            </div>\r\n            <div>\r\n                {testEdit}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        tests: state.tests\r\n    })\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,{clearselectQuestions})(TestList)\r\n","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questions.jsx",["176"],"import React, { Component } from \"react\";\r\nimport { Button } from 'react-bootstrap';\r\nimport history from '../../History/history';\r\n\r\nfunction Questions() {\r\n    return (\r\n      <div className=\"container questions\">\r\n        <div>\r\n          <Button variant=\"btn btn-success\" onClick={() => history.push('/questionsform')}>Add a question</Button>\r\n        </div>\r\n        <div>\r\n          <Button variant=\"btn btn-success\" onClick={() => history.push('/allquestions')}>Show all Questions</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\nexport default Questions;","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\services\\testsService.ts",[],["177","178"],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\services\\httpService.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\question-box-component\\QuestionBox.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\test-form\\FormInputs.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\popup-component\\Popup.jsx",["179"],"import React from 'react';\r\nimport './Popup.css';\r\n\r\nclass Popup extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n    renderContent = () => {\r\n        let data = [];\r\n        for (var key in this.props.content) {\r\n            var value = this.props.content[key];\r\n            if (key !== \"Answers\")\r\n                data.push(<div className=\"item black\">{`${key}: ${value}`}</div>)\r\n            else {\r\n                data.push(<div>{key}:{value.map(item=><div className={`item ${item.isCorrect? \"greenText\" : \"redText\"}`}>{item.Content}</div>)}\r\n                </div>)\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='popup'>\r\n                <div className='popup_inner'>\r\n                    <h3>\r\n                        <div className=\"ui list\">\r\n                            {this.renderContent()}\r\n                        </div>\r\n                    </h3>\r\n                    <button onClick={this.props.closePopup}>close me</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Popup\r\n","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\actions\\index.js",["180","181"],"import TestsService from '../services/testsService'\r\nimport QuestionService from '../services/questionsService'\r\nexport const selectQuestions = (question) => {\r\n    return {\r\n        type: \"SELECT_QUESTIONS\",\r\n        payload: question\r\n    }\r\n}\r\nexport const fetchQuestions = () => async dispatch => {\r\n    const response = await QuestionService.getAllQuestions();\r\n    dispatch(({ type: \"FETCH_QUESTIONS\", payload: response.data }));\r\n}\r\n\r\nexport const fetchQuestion = (id) => async dispatch => {\r\n    const response = await QuestionService.getQuestionById(id);\r\n    if (response.status == 200) {\r\n        dispatch({ type: \"FETCH_QUESTION\", payload: response.data });\r\n    }\r\n    else {\r\n        dispatch({ type: \"FETCH_QUESTION\", payload: null })\r\n    }\r\n}\r\nexport const clearselectQuestions = () => {\r\n    return {\r\n        type: \"CLEAR_SELECT_QUESTIONS\",\r\n        payload: null\r\n    }\r\n}\r\n\r\nexport const fetchTest = (id) => async dispatch => {\r\n    const response = await TestsService.getTestById(id);\r\n    dispatch({ type: \"FETCH_TEST\", payload: response.data });\r\n}\r\n\r\nexport const fetchTests = () => async dispatch => {\r\n    const response = await TestsService.getAllTests();\r\n    dispatch({ type: \"FETCH_TESTS\", payload: response.data });\r\n}\r\nexport const addAnswer = (answer) => {\r\n    return {type:\"ADD_ANSWER\",payload:answer}\r\n}\r\nexport const moveQuestion = (id) => async dispatch=> {\r\n    const response = await QuestionService.getQuestionById(id);\r\n    console.log(\"in actions\", response.data);\r\n    if (response.status == 200) {\r\n        dispatch({ type: \"MOVE_QUESTION\", payload: response.data });\r\n    }\r\n    else {\r\n        dispatch({ type: \"MOVE_QUESTION\", payload: null })\r\n    }\r\n}\r\n","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionsForm.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\enviroments\\enviroment.js",["182"],"export default {\r\n    serverUrl: \"http://localhost:4000\",\r\n  };\r\n  ","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionsTable.jsx",["183"],"import React,{ Component } from \"react\";\r\nimport QuestionBox from '../question-box-component/QuestionBox';\r\nimport Popup from '../popup-component/Popup';\r\nimport { connect } from 'react-redux';\r\nimport { selectQuestions, fetchQuestions } from '../../actions';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass QuestionsTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        props.fetchQuestions();\r\n        this.state = { questions: [], dataTable: [], filterTag: \"\", showPopup:{show:false, content:null} }\r\n        this.initQuestions();\r\n    }\r\n\r\n    initQuestions = () => {\r\n        this.props.questions?.data?.map(res => {\r\n            this.setState({ questions: res });\r\n        })\r\n  }\r\n\r\n    componentDidMount() {\r\n      this.setState({ dataTable: this.renderQuestions() });\r\n  }\r\n  \r\n  renderQuestions() {\r\n    if (this.state.filterTag !== \"\") {\r\n        let filterTags = this.state.filterTag.split(',');\r\n        return this.props.questions.filter(q => filterTags.some(t=>q.Tags.includes(t)))\r\n            .map((question, index) => {\r\n                return (<tr key={question.Id} data-item={question}>\r\n                    <td>{index}</td>\r\n                    <td>{question.Id}</td>                  \r\n                    <td><QuestionBox question={question} /></td>\r\n                    <td>{question.LastUpdated}</td>\r\n                    <td>{question.QuestionType}</td>\r\n                    <td> <button className=\"ui button\" onClick={() => this.togglePopup(question)}>Show</button></td>\r\n                    <td> <Link className=\"ui button\" \r\n                       to={{pathname: `/questionsform/${question.Id}`, formProps: {currentQuestion: question}}}>\r\n                       Edit</Link></td>\r\n                </tr>)\r\n            }\r\n            )\r\n    }\r\n    else {\r\n        return this.props.questions.map((question, index) => {\r\n            return (<tr key={question.Id} data-item={question}>\r\n                <td>{index}</td>\r\n                <td>{question.Id}</td>\r\n                <td><QuestionBox question={question} /></td>\r\n                <td>{question.LastUpdated}</td>\r\n                <td>{question.QuestionType}</td>\r\n                <td> <button className=\"ui button\" onClick={() => this.togglePopup(question)}>Show</button></td>\r\n                <td> <Link className=\"ui button\" \r\n                       to={{pathname: `/questionsform/${question.Id}`, formProps: {currentQuestion: question}}}>\r\n                       Edit</Link></td>\r\n            </tr>)\r\n        })\r\n    }\r\n}\r\n\r\n      updateFiletrState = () => {\r\n        this.setState({ filterTag: window.document.getElementById(\"filterInput\").value });\r\n      }\r\n\r\n      FilerQuestions = () => {\r\n          this.setState({ dataTable: this.renderQuestions() });\r\n      }\r\n\r\n      checkTags=(tag)=>{\r\n        const filterTags = this.state.filterTag.split(\",\");\r\n        console.log(\"FilterTag:\",filterTags);\r\n        console.log(\"tag:\",tag);\r\n        console.log(\"flag\", filterTags.includes(tag));\r\n        if(filterTags.includes(tag))\r\n            return true;\r\n        return false\r\n      }\r\n    \r\ntogglePopup=(question)=> {\r\n  this.setState({\r\n      showPopup:{show: !this.state.showPopup.show, content:question}\r\n  });\r\n}\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div>\r\n                   <label htmlFor=\"filterInput\">Search by Tag</label>\r\n                   <input id=\"filterInput\" value={this.state.filterTag} onChange={this.updateFiletrState} />\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label className=\"white\">All Questions</label>\r\n                    <table className=\"ui celled table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>ID</th>\r\n                                <th>Content</th>\r\n                                <th>Last Updated</th>\r\n                                <th>Type</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.renderQuestions()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>{this.state.showPopup.show ?\r\n                    <Popup\r\n                        content = {this.state.showPopup.content}\r\n                        text='Close Me'\r\n                        closePopup={()=>this.togglePopup(null)}\r\n                    />\r\n                    : null\r\n                }</div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nconst mapStateToProps = (state) => {\r\n\r\n  return {\r\n      questions: state.questions,\r\n      selectedQuestions: state.questionsSelect\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { selectQuestions, fetchQuestions })(QuestionsTable);\r\n  ","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\test-edit\\TestEdit.jsx",["184","185","186","187","188"],"import React from 'react';\r\nimport '../test-form/TestForm.css';\r\nimport { connect } from 'react-redux';\r\nimport { selectQuestions, clearselectQuestions } from '../../actions'\r\nimport FormInputs from '../test-form/FormInputs';\r\nimport TestsSerevice from '../../services/testsService'\r\nimport QuestionBox from '../question-box-component/QuestionBox';\r\nimport Popup from '../popup-component/Popup'\r\nimport TestsService from '../../services/testsService';\r\nimport QuestionService from '../../services/questionsService';\r\n\r\n\r\nfunction ColorRow(e) {\r\n    let TR = e.target;\r\n    while (TR.tagName != \"TR\") {\r\n        TR = TR.parentNode;\r\n    }\r\n    if (TR.classList.contains(\"green\")) {\r\n        TR.classList.remove(\"green\");\r\n        /*console.log(\"disable\")*/\r\n    }\r\n    else {\r\n        TR.classList.add(\"green\");\r\n        /*console.log(\"enable\")*/\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nclass TestEdit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"testEdit Prpos\",this.props);\r\n\r\n        this.state = { dataTable: [], filterTag: \"\", questions: [], showPopup:{show:false, content:null} };\r\n         props.Test.questions.map(qustionId=>{\r\n             QuestionService.getQuestionById(qustionId).then(res=>{\r\n                 props.selectQuestions(res.data);\r\n             });\r\n         })\r\n        this.initQuestions();\r\n\r\n    }\r\n\r\n    initQuestions = () => {\r\n        this.props.questions.then(res => {\r\n            this.setState({ questions: res.data });\r\n        })\r\n    }\r\n\r\n    togglePopup=(question)=> {\r\n        this.setState({\r\n            showPopup:{show: !this.state.showPopup.show, content:question}\r\n        });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.setState({ dataTable: this.renderQuestions() });\r\n    }\r\n\r\n    onSubmit = (test) => {\r\n        test = { ...test, questions: this.props.selectedQuestions.map(q => q.Id) };\r\n        alert(\"Test successfully created\");\r\n        TestsSerevice.addTest(test);\r\n        window.location.reload();\r\n    }\r\n    checkTags=(tag)=>{\r\n            const filterTags = this.state.filterTag.split(\",\");\r\n            console.log(\"FilterTag:\",filterTags);\r\n            console.log(\"tag:\",tag);\r\n            console.log(\"flag\", filterTags.includes(tag));\r\n            if(filterTags.includes(tag))\r\n                return true;\r\n        return false\r\n        \r\n\r\n    }\r\n    renderQuestions() {\r\n        let temp = [];\r\n        this.props.questions\r\n            .then(res => {\r\n                res.data.map((question, index) => {\r\n                    if (this.state.filterTag !== \"\") {\r\n                        question.Tags.forEach(t=>{\r\n                        if (this.checkTags(t)) {\r\n                            console.log(\"push\");\r\n                            temp.push(\r\n                                <tr key={question.Id} data-item={question}\r\n                                    onClick={(e) => {\r\n                                        ColorRow(e)\r\n                                        this.props.selectQuestions(question);\r\n                                    }}\r\n                                    className={(this.props.selectedQuestions.find(q => q.Id === question.Id)) ? \"green\" : \"\"}>\r\n                                    <td>{index}</td>\r\n                                    <td>{question.Id}</td>\r\n                                    <td><QuestionBox question={question} /></td>\r\n                                    <td> <button className=\"ui button\" onClick={()=>this.togglePopup(question)}>Show</button></td>\r\n\r\n                                </tr>)\r\n                            this.setState({ dataTable: temp });\r\n                        }                        })\r\n                    }\r\n                    else {\r\n                        temp.push(<tr key={question.Id} data-item={question}\r\n                            onClick={(e) => {\r\n                                ColorRow(e)\r\n                                this.props.selectQuestions(question);\r\n                            }}\r\n                            className={(this.props.selectedQuestions.find(q => q.Id === question.Id)) ? \"green\" : \"\"}>\r\n                            <td>{index}</td>\r\n                            <td>{question.Id}</td>\r\n                            <td><QuestionBox question={question} /></td>\r\n                            <td> <button className=\"ui button\" onClick={()=>this.togglePopup(question)}>Show</button></td>\r\n                        </tr>)\r\n                        this.setState({ dataTable: temp });\r\n\r\n                    }\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    updateFiletrState = () => {\r\n        this.setState({ filterTag: window.document.getElementById(\"filterInput\").value });\r\n    }\r\n    FilerQuestions = () => {\r\n        this.setState({ dataTable: this.renderQuestions() });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"TestForm\">\r\n                <FormInputs renderField={this.renderQuestions} onSubmit={this.onSubmit}>\r\n                {this.props.Test}\r\n                </FormInputs>\r\n                <div>\r\n                    <input id=\"filterInput\" value={this.state.filterTag} onChange={this.updateFiletrState} />\r\n                    <button onClick={this.FilerQuestions}>Search</button>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label className=\"white\">Chose questions</label>\r\n                    <table className=\"ui celled table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>ID</th>\r\n                                <th>Content</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.dataTable}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>{this.state.showPopup.show ?\r\n                    <Popup\r\n                        content = {this.state.showPopup.content}\r\n                        text='Close Me'\r\n                        closePopup={()=>this.togglePopup(null)}\r\n                    />\r\n                    : null\r\n                }</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        questions: state.questions,\r\n        selectedQuestions: state.questionsSelect\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { selectQuestions })(TestEdit);","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\multipleChoiceQuestion.jsx",["189","190"],"import { render } from '@testing-library/react';\r\nimport React, { Component } from 'react';\r\nimport AnswerInput from './multiAnswerInput';\r\n\r\nfunction MultipleChoiceQuestion(props) {  \r\n      return ( \r\n         <div>\r\n            <div>\r\n               <AnswerInput Id=\"1\" answerChanged={props.answerChanged} \r\n               correctAnswerChanged={props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div>\r\n               <AnswerInput Id=\"2\" answerChanged={props.answerChanged} \r\n               correctAnswerChanged={props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div>\r\n               <AnswerInput Id=\"3\" answerChanged={props.answerChanged} \r\n               correctAnswerChanged={props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div>\r\n               <AnswerInput Id=\"4\" answerChanged={props.answerChanged} \r\n               correctAnswerChanged={props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"13\" hidden = {true}>\r\n               <AnswerInput Id=\"5\" answerChanged={props.answerChanged} \r\n               correctAnswerChanged={props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"14\" hidden = {true}>\r\n               <AnswerInput Id=\"6\" answerChanged={props.answerChanged} \r\n               correctAnswerChanged={props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"15\" hidden = {true}>\r\n               <AnswerInput Id=\"7\" answerChanged={props.answerChanged} \r\n               correctAnswerChanged={props.correctAnswerChanged}/>\r\n            </div>\r\n            <br/>\r\n            <div Id=\"16\" hidden = {true}>\r\n               <AnswerInput Id=\"8\" answerChanged={props.answerChanged} \r\n               correctAnswerChanged={props.correctAnswerChanged}/>\r\n            </div>          \r\n            <input type=\"button\" value = \"Add Answer\" onClick ={props.addAnswerInput}/>\r\n            <input type=\"button\" value = \"Remove Answer\" onClick ={props.removeAnswerInput}/>\r\n         </div>\r\n     );\r\n   }\r\nexport default MultipleChoiceQuestion;","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\questionTypes.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\choiceQuestion.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\choiceAnswerInput.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\questionsComponents\\multiAnswerInput.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\homeComponents\\home.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\routeComponent\\Routes.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\History\\history.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\Navigation\\navigation.js",["191","192"],"import React from 'react';\r\nimport { Navbar, Nav, Form, Button } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst Navigation = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <Navbar bg=\"primary\" variant=\"dark\">\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"/\">Home</Nav.Link>\r\n                    <Nav.Link href=\"/questions\">Questions</Nav.Link>\r\n                    <Nav.Link href=\"/tests\">Tests</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default withRouter(Navigation);","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\answersReducer.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\reducers\\currentQuestion.js",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\testsNav\\TestNav.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\Testing\\Exam.jsx",[],"C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\Testing\\QuestionPresent.jsx",["193"],"import React from 'react';\r\nimport AnsQuestionForm from './AnsQuestionForm';\r\nimport './QuestionPresent.css';\r\n\r\nclass QuestionPresent extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n    onSubmit=(answer)=>{\r\n        this.props.onSubmit(answer);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"QuestionPresent\">\r\n                    <div className=\"ui card\">\r\n                        <label>{this.props.question?.Title}</label>\r\n                    </div>\r\n                    <div>\r\n                        <h5 className=\"blue\">{this.props.question?.Tags?.map(t=>t+\"||\")}</h5>\r\n                    </div>\r\n                    <div className=\"ui attached segment\">\r\n                       <h2> {this.props.question?.QuestionBody}</h2>\r\n                    </div>\r\n                    <div className=\"ui attached segment\">\r\n                        <h4>{this.props.question?.ExtraInfo}</h4>\r\n                    </div>\r\n                    <div>\r\n                        <AnsQuestionForm onSubmit={this.onSubmit}>{this.props.question?.Answers}</AnsQuestionForm>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuestionPresent; \r\n","C:\\Users\\almog\\Desktop\\WebTestsProject\\TestWeb-Proj\\src\\components\\Testing\\AnsQuestionForm.jsx",["194","195"],"import { reduxForm, Field } from 'redux-form';\r\nimport React, { useState } from 'react'\r\n\r\nconst AnsQuestionForm = (props) => {\r\n    const [answerValue, setanswerValue] = useState(\"\")\r\n    const createInput = (formProps) => {\r\n        console.log(formProps);\r\n        return (<input onChange={formProps.input.onChange} name=\"group1\" type={formProps.type} value={formProps.children}></input>)\r\n    }\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"ans\",e);\r\n        props.onSubmit(answerValue);\r\n        props.reset();\r\n    }\r\n   const answerChange= (e) => {\r\n        setanswerValue(e.target.value);\r\n    }\r\n    return (\r\n        <div className=\"AnsQuestionForm\">\r\n            <form className=\"ui form\" onSubmit={onSubmit}>\r\n                {props.children?.map((a, index) => {\r\n                    return (\r\n                        <div key={index} className=\"Field radio checkbox\">\r\n                            <div className=\"ui card\">\r\n                            <input onChange={answerChange} name=\"group1\" type=\"radio\" value={a.Content}></input>\r\n                                {/*<Field name=\"answer\" component={createInput} type=\"radio\">{a.Content}</Field>*/}\r\n                                <label>{a.Content}</label>\r\n                            </div>\r\n                        </div>)\r\n                })}\r\n\r\n\r\n                <div className=\"nextbtn\">\r\n                    <button type=\"submit\">Next</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default reduxForm({ form: 'QuestionAnswer' })(AnsQuestionForm)\r\n",{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":13,"column":23,"nodeType":"202","messageId":"203","endLine":13,"endColumn":25},{"ruleId":"204","severity":1,"message":"205","line":40,"column":45,"nodeType":"206","messageId":"207","endLine":40,"endColumn":47},{"ruleId":"196","replacedBy":"208"},{"ruleId":"198","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":1,"column":8,"nodeType":"212","messageId":"213","endLine":1,"endColumn":12},{"ruleId":"214","severity":1,"message":"215","line":10,"column":11,"nodeType":"212","messageId":"213","endLine":10,"endColumn":25},{"ruleId":"204","severity":1,"message":"205","line":25,"column":37,"nodeType":"206","messageId":"207","endLine":25,"endColumn":39},{"ruleId":"216","severity":1,"message":"217","line":26,"column":17,"nodeType":"218","messageId":"219","endLine":41,"endColumn":18},{"ruleId":"220","severity":1,"message":"221","line":45,"column":8,"nodeType":"222","endLine":45,"endColumn":10,"suggestions":"223"},{"ruleId":"214","severity":1,"message":"224","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"225","severity":1,"message":"226","line":5,"column":5,"nodeType":"227","messageId":"228","endLine":8,"endColumn":6},{"ruleId":"200","severity":1,"message":"229","line":16,"column":25,"nodeType":"202","messageId":"203","endLine":16,"endColumn":27},{"ruleId":"200","severity":1,"message":"229","line":45,"column":25,"nodeType":"202","messageId":"203","endLine":45,"endColumn":27},{"ruleId":"230","severity":1,"message":"231","line":1,"column":1,"nodeType":"232","endLine":3,"endColumn":5},{"ruleId":"204","severity":1,"message":"205","line":17,"column":45,"nodeType":"206","messageId":"207","endLine":17,"endColumn":47},{"ruleId":"214","severity":1,"message":"233","line":4,"column":27,"nodeType":"212","messageId":"213","endLine":4,"endColumn":47},{"ruleId":"214","severity":1,"message":"234","line":9,"column":8,"nodeType":"212","messageId":"213","endLine":9,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":15,"column":23,"nodeType":"202","messageId":"203","endLine":15,"endColumn":25},{"ruleId":"204","severity":1,"message":"205","line":37,"column":44,"nodeType":"206","messageId":"207","endLine":37,"endColumn":46},{"ruleId":"204","severity":1,"message":"205","line":84,"column":48,"nodeType":"206","messageId":"207","endLine":84,"endColumn":50},{"ruleId":"214","severity":1,"message":"235","line":1,"column":10,"nodeType":"212","messageId":"213","endLine":1,"endColumn":16},{"ruleId":"214","severity":1,"message":"224","line":2,"column":17,"nodeType":"212","messageId":"213","endLine":2,"endColumn":26},{"ruleId":"214","severity":1,"message":"236","line":2,"column":23,"nodeType":"212","messageId":"213","endLine":2,"endColumn":27},{"ruleId":"214","severity":1,"message":"237","line":2,"column":29,"nodeType":"212","messageId":"213","endLine":2,"endColumn":35},{"ruleId":"225","severity":1,"message":"226","line":6,"column":5,"nodeType":"227","messageId":"228","endLine":9,"endColumn":6},{"ruleId":"214","severity":1,"message":"238","line":1,"column":21,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"214","severity":1,"message":"239","line":6,"column":11,"nodeType":"212","messageId":"213","endLine":6,"endColumn":22},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["240"],["241"],"@typescript-eslint/no-unused-vars","'data' is defined but never used.","Identifier","unusedVar","no-unused-vars","'getChoosenTest' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.tests'. Either include it or remove the dependency array.","ArrayExpression",["242"],"'Component' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Expected '===' and instead saw '=='.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'clearselectQuestions' is defined but never used.","'TestsService' is defined but never used.","'render' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'Field' is defined but never used.","'createInput' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"243","fix":"244"},"Update the dependencies array to be: [props.tests]",{"range":"245","text":"246"},[1406,1408],"[props.tests]"]